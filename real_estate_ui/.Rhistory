model
ggplot(sample_rcdf, aes(total_pop/ 1000, median_listing_price / 1000)) +
geom_point() + scale_x_log10() + scale_y_log10() + geom_smooth(method = 'lm', se= FALSE)
ggplot(sample_rcdf, aes(total_pop/ 1000, median_listing_price / 1000, color= county_pop_size, shape=largest_race_group)) + geom_point() + scale_x_log10() + scale_y_log10()
rcdf_table <- data.table::data.table(sample_rcdf)
rcdf_table[,as.list(coef(lm(median_listing_price ~ median_square_feet))), by= largest_race_group]
rcdf_table <- data.table::data.table(sample_rcdf)
rcdf_table[,as.list(coef(lm(median_listing_price ~ median_square_feet + 0))), by= largest_race_group]
rcdf_table <- data.table::data.table(sample_rcdf)
rcdf_table[,as.list(coef(lm(median_listing_price ~ median_square_feet))), by= largest_race_group]
coef(lm(median_listing_price ~ median_square_feet, data= rcdf_table))
coef(lm(median_listing_price ~ median_square_feet, data= rcdf_table))$coef
by(sample_rcdf, sample_rcdf$largest_race_group,FUN = function(x) cor(sample_rcdf$median_listing_price, sample_rcdf$median_square_feet))
by(sample_rcdf, sample_rcdf$largest_race_group,FUN = function(x) cor(sample_rcdf$median_listing_price, sample_rcdf$median_square_feet, method='Spearman'))
by(sample_rcdf, sample_rcdf$largest_race_group,FUN = function(x) cor(sample_rcdf$median_listing_price, sample_rcdf$median_square_feet, method='spearman'))
by(sample_rcdf, sample_rcdf$largest_race_group,FUN = function(x) cor(sample_rcdf$median_listing_price, sample_rcdf$median_square_feet))
by(sample_rcdf, sample_rcdf$largest_race_group,FUN = function(x) cor(sample_rcdf$median_listing_price, sample_rcdf$median_square_feet))
by(sample_rcdf, sample_rcdf$largest_race_group,FUN = function(x) cor(sample_rcdf$median_listing_price, sample_rcdf$median_square_feet))
by(sample_rcdf, sample_rcdf$largest_race_group,FUN = function(x) cor(sample_rcdf$median_listing_price, sample_rcdf$median_square_feet))
by(sample_rcdf, sample_rcdf$largest_race_group,FUN =function(x) cor(sample_rcdf$median_listing_price, sample_rcdf$median_square_feet))
test1 <- sample_rcdf %>%
filter(largest_race_group == 'Hispanic')
cor(test1$median_listing_price, test1$median_square_feet)
test1 <- sample_rcdf %>%
filter(largest_race_group == 'white')
cor(test1$median_listing_price, test1$median_square_feet)
test1 <- sample_rcdf %>%
filter(largest_race_group == 'White')
cor(test1$median_listing_price, test1$median_square_feet)
test1 <- sample_rcdf %>%
filter(largest_race_group == 'White')
cor(test1$median_listing_price, test1$median_square_feet)
test1 <- sample_rcdf %>%
filter(largest_race_group == 'White')
cor(test1$median_listing_price, test1$median_square_feet)
test1 <- sample_rcdf %>%
filter(largest_race_group == 'Hispanic')
cor(test1$median_listing_price, test1$median_square_feet)
test1 <- sample_rcdf %>%
filter(largest_race_group == 'Asian')
cor(test1$median_listing_price, test1$median_square_feet)
test1 <- sample_rcdf %>%
filter(largest_race_group == 'Black')
cor(test1$median_listing_price, test1$median_square_feet)
test1 <- sample_rcdf %>%
filter(largest_race_group == 'Native American')
cor(test1$median_listing_price, test1$median_square_feet)
test1 <- sample_rcdf %>%
filter(largest_race_group == 'Black')
cor(test1$median_listing_price, test1$median_square_feet)
test1 <- sample_rcdf %>%
filter(largest_race_group == 'White')
cor(test1$median_listing_price, test1$median_square_feet)
View(test1)
test1 <- sample_rcdf %>%
filter(largest_race_group == 'White', !is.na(median_square_feet))
cor(test1$median_listing_price, test1$median_square_feet)
rcdf2 <- rcdf %>%
mutate(total_pop = total,
total_pop_white_perc = total_population_of_one_race_white_alone / total_pop,
total_pop_black_perc = total_population_of_one_race_black_or_african_american_alone / total_pop,
total_pop_american_indigenous_perc = total_population_of_one_race_american_indian_and_alaska_native_ / total_pop,
total_pop_asian_perc = total_population_of_one_race_asian_alone / total_pop,
total_pop_pacific_islander_perc =
total_population_of_one_race_native_hawaiian_and_other_pacific_ / total_pop,
total_pop_other_perc = total_population_of_one_race_some_other_race_alone / total_pop,
total_pop_mixed_races_perc = total_population_of_two_or_more_races / total_pop,
total_pop_hispanic_perc = total_hispanic_or_latino / total_pop,
county_pop_size = case_when(total_pop < 50000 ~ "Non Metro",
total_pop < 250000 ~ "Small Metro",
total_pop < 1000000 ~ "Mid Metro",
total_pop >= 1000000 ~ "Large Metro"
),
most_pop_perc = pmax(total_pop_white_perc, total_pop_black_perc, total_pop_american_indigenous_perc,
total_pop_asian_perc, total_pop_pacific_islander_perc, total_pop_other_perc,
total_pop_mixed_races_perc, total_pop_hispanic_perc),
largest_race_group = case_when(total_pop_hispanic_perc == most_pop_perc ~ "Hispanic",
total_pop_white_perc == most_pop_perc ~ "White",
total_pop_black_perc == most_pop_perc ~ "Black",
total_pop_american_indigenous_perc == most_pop_perc ~ "Native American",
total_pop_asian_perc == most_pop_perc ~ "Asian",
total_pop_pacific_islander_perc == most_pop_perc ~ "Pacific Islander",
total_pop_other_perc > most_pop_perc ~ "Other Race",
total_pop_mixed_races_perc > most_pop_perc ~ "Mixed Races",
total_pop_white_perc == most_pop_perc ~ "White"
)
) %>%
filter(!is.na(median_listing_price), !is.na(median_square_feet)
#new_listing_count > 0,
#majority_hisp_or_race == "Majority Native American"
#median_listing_price < 500000,
#majority_hisp_or_race != "Majority White"
#majority_hisp_or_race != "No Majority Race",
#county_pop_size != "Non Metropolitan",
#county_pop_size == "Large Metropolitan"
#majority_hisp_or_race == "Majority Black"
)
#filter(county_pop_size != 'Non Metropolitan', majority_hisp_or_race == "Majority Hispanic")
#filter(total_pop_hispanic_perc > .5)#, median_listing_price < 750000)#, county_pop_size != 'Non Metropolitan')
summary(rcdf2$median_listing_price)
listing_price_mean <- mean(rcdf2$median_listing_price)
listing_price_sd <- sd(rcdf2$median_listing_price)
sample_top <- listing_price_mean + (listing_price_sd * 3)
sample_bottom <- listing_price_mean - (listing_price_sd * 3)
sample_rcdf <- rcdf2 %>%
filter(median_listing_price >= sample_bottom, median_listing_price <= sample_top)
ggplot(sample_rcdf, aes(median_listing_price / 100000)) +geom_histogram()
summary(sample_rcdf$median_listing_price)
cor(sample_rcdf$median_listing_price, sample_rcdf$median_square_feet, use= 'pairwise.complete.obs')
model <- lm(median_square_feet~median_listing_price, data=sample_rcdf)
model
ggplot(sample_rcdf, aes(median_listing_price / 1000, median_square_feet,)) +
geom_point() + scale_x_log10() + scale_y_log10() +
geom_smooth(method = 'lm', se= FALSE)
ggplot(sample_rcdf, aes(median_listing_price / 1000, median_square_feet,
color= county_pop_size, shape=largest_race_group )) + geom_point() +
scale_x_log10() + scale_y_log10()
cor(sample_rcdf$median_listing_price, sample_rcdf$total_pop, use= 'pairwise.complete.obs')
model <- lm(median_listing_price~total_pop + 0, data=sample_rcdf)
model
ggplot(sample_rcdf, aes(total_pop/ 1000, median_listing_price / 1000)) +
geom_point() + scale_x_log10() + scale_y_log10() + geom_smooth(method = 'lm', se= FALSE)
ggplot(sample_rcdf, aes(total_pop/ 1000, median_listing_price / 1000, color= county_pop_size, shape=largest_race_group)) + geom_point() + scale_x_log10() + scale_y_log10()
ggplot(sample_rcdf, aes(median_listing_price / 1000)) + geom_histogram() + facet_wrap(vars(largest_race_group))
ggplot(sample_rcdf, aes(median_square_feet / 1000, median_listing_price / 10000)) + geom_line(color= "blue") +
geom_smooth(method = 'lm', color= "red") +
labs(title = "Housing Price and Size by race/ethnicity and metropolitan type",
x="Median Square Feet in the thousands", y= "Median Listing Price in the tens of thousands") +
facet_grid(largest_race_group ~ county_pop_size) + scale_x_log10() + scale_y_log10()
ggplot(sample_rcdf, aes(median_square_feet / 1000, median_listing_price / 10000, color=largest_race_group)) + geom_point() +
geom_smooth(method = 'lm') +
labs(title = "Housing Price and Size by race/ethnicity and metropolitan type",
x="Median Square Feet in the thousands", y= "Median Listing Price in the tens of thousands") +
#facet_grid(largest_race_group ~ county_pop_size)
scale_x_log10() + scale_y_log10()
lm(median_listing_price~largest_race_group + 0, data = sample_rcdf)
by(sample_rcdf, sample_rcdf$largest_race_group,FUN =function(x) cor(sample_rcdf$median_listing_price, sample_rcdf$median_square_feet))
sample_rcdf[,as.list(cor("median_listing_price","median_square_feet")), by=largest_race_group]
sample_rcdf[,as.list(cor("median_listing_price","median_square_feet")), by=largest_race_group]
sample_rcdf[,as.list(cor("median_listing_price","median_square_feet")), by="largest_race_group"]
sample_rcdf[,as.list(cor("median_listing_price","median_square_feet")), by="largest_race_group"]
sample_rcdf[,as.list(cor("median_listing_price","median_square_feet"))]
sample_rcdf[,as.list(cor("median_listing_price","median_square_feet"))]
table_rcdf <- data.table::data.table(sample_rcdf)
table_rcdf[,as.list(cor("median_listing_price","median_square_feet")), by=largest_race_group]
table_rcdf <- data.table::data.table(sample_rcdf)
table_rcdf[,as.list(cor(median_listing_price , median_square_feet)), by=largest_race_group]
table_rcdf <- data.table::data.table(sample_rcdf)
race_group_cor <- table_rcdf[,as.list(cor(median_listing_price , median_square_feet)), by=largest_race_group]
race_group_cor['V1']
table_rcdf <- data.table::data.table(sample_rcdf)
race_group_cor <- table_rcdf[,as.list(cor(median_listing_price , median_square_feet)), by=largest_race_group]
race_group_cor[2]
table_rcdf <- data.table::data.table(sample_rcdf)
race_group_cor <- table_rcdf[,as.list(cor(median_listing_price , median_square_feet)), by=largest_race_group]
colnames(race_group_cor)
table_rcdf <- data.table::data.table(sample_rcdf)
race_group_cor <- table_rcdf[,as.list(cor(median_listing_price , median_square_feet)), by=largest_race_group]
colnames(race_group_cor) <- c(largest_race_group_by_county, med_list_price_med_sq_ft_correlation)
table_rcdf <- data.table::data.table(sample_rcdf)
race_group_cor <- table_rcdf[,as.list(cor(median_listing_price , median_square_feet)), by=largest_race_group]
colnames(race_group_cor) <- c('largest_race_group_by_county', 'med_list_price_med_sq_ft_correlation')
race_group_cor
table_rcdf[,as.list(coef(lm(median_listing_price~median_square_feet))), by=largest_race_group]
table_rcdf[,as.list(coef(lm(median_listing_price~median_square_feet +0))), by=largest_race_group]
table_rcdf[,as.list(coef(lm(median_listing_price~median_square_feet))), by=largest_race_group]
race_group_coef <- table_rcdf[,as.list(coef(lm(median_listing_price~median_square_feet))), by=largest_race_group]
colnames(race_group_coef) <- c('largest_race_group_by_county', 'Y-Intercept', 'coefficient')
race_group_coef
table_rcdf <- data.table::data.table(sample_rcdf)
race_group_cor <- table_rcdf[,as.list(cor(median_listing_price , median_square_feet)), by=largest_race_group]
colnames(race_group_cor) <- c('largest_race_group_by_county', 'med_list_price_med_sq_ft_correlation')
race_group_coef <- table_rcdf[,as.list(coef(lm(median_listing_price~median_square_feet))), by=largest_race_group]
colnames(race_group_coef) <- c('largest_race_group_by_county', 'Y-Intercept', 'coefficient')
race_group_coef
race_group_df <- merge(data.frame(race_group_coef), data.frame(race_group_cor), by='largest_race_group_by_county')
race_group_df
table_rcdf <- data.table::data.table(sample_rcdf)
race_group_cor <- table_rcdf[,as.list(cor(median_listing_price , median_square_feet)), by=largest_race_group]
colnames(race_group_cor) <- c('largest_race_group_by_county', 'med_list_price_med_sq_ft_correlation')
race_group_coef <- table_rcdf[,as.list(coef(lm(median_listing_price~median_square_feet))), by=largest_race_group]
colnames(race_group_coef) <- c('largest_race_group_by_county', 'Y-Intercept', 'coefficient')
race_group_df <- merge(data.frame(race_group_coef), data.frame(race_group_cor), by='largest_race_group_by_county')
race_group_df
ggplot(sample_rcdf, aes(median_listing_price, county_pop_size)) + geom_point()
ggplot(sample_rcdf, aes(county_pop_size, median_listing_price)) + geom_point()
ggplot(sample_rcdf, aes(county_pop_size, median_listing_price)) + geom_point() +
geom_smooth(method = 'lm')
ggplot(sample_rcdf, aes(county_pop_size, median_listing_price)) + geom_point() +
geom_smooth(method = 'lm')
ggplot(sample_rcdf, aes(county_pop_size, median_listing_price)) + geom_point() +
geom_smooth(method = 'lm', se=FALSE)
ggplot(sample_rcdf, aes(county_pop_size, median_listing_price)) + geom_point() +
geom_smooth()
ggplot(sample_rcdf, aes(county_pop_size, median_listing_price)) + geom_point() +
geom_smooth(method = 'lm', se=FALSE)
ggplot(sample_rcdf, aes(county_pop_size, median_listing_price, color= largest_race_group)) + geom_point() +
geom_smooth(method = 'lm', se=FALSE)
ggplot(sample_rcdf, aes(county_pop_size, median_listing_price, color= largest_race_group)) +
geom_point() + geom_smooth(method = 'lm', se=FALSE)
ggplot(sample_rcdf, aes(factor(county_pop_size, levels= c('Non Metro', 'Small Metro', 'Mid Metro', 'Large Metro'), median_listing_price, color= largest_race_group)) +
geom_point() + geom_smooth(method = 'lm', se=FALSE)
ggplot(sample_rcdf, aes(factor(county_pop_size, levels= c('Non Metro', 'Small Metro', 'Mid Metro', 'Large Metro')), median_listing_price, color= largest_race_group)) +
geom_point() + geom_smooth(method = 'lm', se=FALSE)
ggplot(sample_rcdf, aes(factor(county_pop_size, levels= c('Non Metro', 'Small Metro', 'Mid Metro', 'Large Metro')), median_listing_price, color= largest_race_group)) +
geom_point() + geom_smooth()
ggplot(sample_rcdf, aes(factor(county_pop_size, levels= c('Non Metro', 'Small Metro', 'Mid Metro', 'Large Metro')), median_listing_price, color= largest_race_group)) +
geom_point() + geom_smooth(method = 'lm')
ggplot(sample_rcdf, aes(factor(county_pop_size, largest_race_group)) +
geom_point() + geom_smooth(method = 'lm')
ggplot(sample_rcdf, aes(county_pop_size, largest_race_group) +
geom_point() +
ggplot(sample_rcdf, aes(county_pop_size, largest_race_group) +
geom_point()
ggplot(sample_rcdf, aes(county_pop_size, largest_race_group)) +
geom_point()
cor(sample_rcdf$median_listing_price, sample_rcdf$total_pop, use= 'pairwise.complete.obs')
model <- lm(median_listing_price~total_pop + 0, data=sample_rcdf)
model
ggplot(sample_rcdf, aes(total_pop/ 1000, median_listing_price / 1000)) +
geom_point() + scale_x_log10() + scale_y_log10() + geom_smooth(method = 'lm', se= FALSE)
ggplot(sample_rcdf, aes(total_pop/ 1000, median_listing_price / 1000, color= county_pop_size, shape=largest_race_group)) + geom_point() + scale_x_log10() + scale_y_log10()
shiny::runApp('Desktop/CODE/Data Projects/Real-Estate-By-Census/ui')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rgdal)
source("~/Desktop/CODE/Data Projects/Real-Estate-By-Census/shapefiles.R")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rgdal)
source("~/Desktop/CODE/Data Projects/Real-Estate-By-Census/shapefiles.R")
summary(rcdf2$median_listing_price)
listing_price_mean <- mean(rcdf2$median_listing_price)
listing_price_sd <- sd(rcdf2$median_listing_price)
sample_top <- listing_price_mean + (listing_price_sd * 3)
sample_bottom <- listing_price_mean - (listing_price_sd * 3)
sample_rcdf <- rcdf2 %>%
filter(median_listing_price >= sample_bottom, median_listing_price <= sample_top)
ggplot(sample_rcdf, aes(median_listing_price / 100000)) +geom_histogram()
summary(sample_rcdf$median_listing_price)
cor(sample_rcdf$median_listing_price, sample_rcdf$median_square_feet, use= 'pairwise.complete.obs')
model <- lm(median_square_feet~median_listing_price, data=sample_rcdf)
model
ggplot(sample_rcdf, aes(median_listing_price / 1000, median_square_feet,)) +
geom_point() + scale_x_log10() + scale_y_log10() +
geom_smooth(method = 'lm', se= FALSE)
ggplot(sample_rcdf, aes(median_listing_price / 1000, median_square_feet,
color= county_pop_size, shape=largest_race_group )) + geom_point() +
scale_x_log10() + scale_y_log10()
cor(sample_rcdf$median_listing_price, sample_rcdf$total_pop, use= 'pairwise.complete.obs')
model <- lm(median_listing_price~total_pop + 0, data=sample_rcdf)
model
ggplot(sample_rcdf, aes(total_pop/ 1000, median_listing_price / 1000)) +
geom_point() + scale_x_log10() + scale_y_log10() + geom_smooth(method = 'lm', se= FALSE)
ggplot(sample_rcdf, aes(total_pop/ 1000, median_listing_price / 1000, color= county_pop_size, shape=largest_race_group)) + geom_point() + scale_x_log10() + scale_y_log10()
ggplot(sample_rcdf, aes(median_listing_price / 1000)) + geom_histogram() + facet_wrap(vars(largest_race_group))
ggplot(sample_rcdf, aes(median_square_feet / 1000, median_listing_price / 10000)) + geom_line(color= "blue") +
geom_smooth(method = 'lm', color= "red") +
labs(title = "Housing Price and Size by race/ethnicity and metropolitan type",
x="Median Square Feet in the thousands", y= "Median Listing Price in the tens of thousands") +
facet_grid(largest_race_group ~ county_pop_size) + scale_x_log10() + scale_y_log10()
ggplot(sample_rcdf, aes(median_square_feet / 1000, median_listing_price / 10000, color=largest_race_group)) + geom_point() +
geom_smooth(method = 'lm') +
labs(title = "Housing Price and Size by race/ethnicity and metropolitan type",
x="Median Square Feet in the thousands", y= "Median Listing Price in the tens of thousands") +
#facet_grid(largest_race_group ~ county_pop_size)
scale_x_log10() + scale_y_log10()
lm(median_listing_price~largest_race_group + 0, data = sample_rcdf)
table_rcdf <- data.table::data.table(sample_rcdf)
race_group_cor <- table_rcdf[,as.list(cor(median_listing_price , median_square_feet)), by=largest_race_group]
colnames(race_group_cor) <- c('largest_race_group_by_county', 'med_list_price_med_sq_ft_correlation')
race_group_coef <- table_rcdf[,as.list(coef(lm(median_listing_price~median_square_feet))), by=largest_race_group]
colnames(race_group_coef) <- c('largest_race_group_by_county', 'Y-Intercept', 'coefficient')
race_group_df <- merge(data.frame(race_group_coef), data.frame(race_group_cor), by='largest_race_group_by_county')
race_group_df
runApp('Desktop/CODE/Data Projects/Real-Estate-By-Census/ui')
View(main_df)
View(rcdf2)
runApp('Desktop/CODE/Data Projects/Real-Estate-By-Census/ui')
runApp('Desktop/CODE/Data Projects/Real-Estate-By-Census/ui')
shiny::runApp('Desktop/CODE/Data Projects/Real-Estate-By-Census/ui')
runApp('Desktop/CODE/Data Projects/Real-Estate-By-Census/ui')
install.packages("Arrow")
install.packages("arrow")
library(arrow)
fhv_obj<- read_parquet('~/downloads/fhv_tripdata_2022-01.parquet')
View(fhv_obj)
green_obj <- read_parquet('~/downloads/green_tripdata_2022-01.parquet)
''
'
green_obj <- read_parquet('~/downloads/green_tripdata_2022-01.parquet')
View(green_obj)
yellow_obj <- read_parquet('~/downloands/yellow_yellow_tripdata_2019-03.parquet')
yellow_obj <- read_parquet('~/downloads/yellow_yellow_tripdata_2019-03.parquet')
yellow_obj2 <- read_parquet('~/downloads/yellow_tripdata_2019-03.parquet')
View(yellow_obj2)
yellow_obj <- read_parquet('~/downloads/yellow_yellow_tripdata_2019-01.parquet')
yellow_obj <- read_parquet('~/downloads/yellow_yellow_tripdata_2019-01.parquet')
yellow_obj <- read_parquet('~/downloads/yellow_yellow_tripdata_2019-01.parquet')
yellow_obj <- read_parquet('~/downloads/yellow_yellow_tripdata_2019-01.parquet')
yellow_obj <- read_parquet('~/downloads/yellow_yellow_tripdata_2019-01.parquet')
yellow_obj <- read_parquet('~/downloads/yellow_yellow_tripdata_2019-01 (1).parquet')
yellow_obj <- read_parquet('~/downloads/yellow_yellow_tripdata_2019-01 (1).parquet')
yellow_obj <- read_parquet('~/downloads/yellow_yellow_tripdata_2019-01 (2).parquet')
View(yellow_obj)
View(green_obj)
View(yellow_obj)
new_obj <- read_parquet('~/downloads/modified_file.parquet')
library(arrow)
new_obj <- read_parquet('~/downloads/modified_file.parquet')
View(new_obj)
rm(list = ls())
shiny::runApp('Desktop/code/Data Projects/Real-Estate-By-Census/real_estate_ui')
runApp('Desktop/code/Data Projects/Real-Estate-By-Census/real_estate_ui')
runApp('Desktop/code/Data Projects/Real-Estate-By-Census/real_estate_ui')
runApp('Desktop/code/Data Projects/Real-Estate-By-Census/real_estate_ui')
runApp('Desktop/code/Data Projects/Real-Estate-By-Census/real_estate_ui')
View(rcdf2)
typeof(rcdf$median_listing_price)
runApp('Desktop/code/Data Projects/Real-Estate-By-Census/real_estate_ui')
runApp('Desktop/code/Data Projects/Real-Estate-By-Census/real_estate_ui')
runApp('Desktop/code/Data Projects/Real-Estate-By-Census/real_estate_ui')
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='miguelrondon92', token='801C06AFE5A2BA30E3551A1BF1514EAC', secret='dHy5lAjXMO+76OCWJ4G8m+Px53Xef92hUtRDycqf')
library(rsconnect)
rsconnect::deployApp('~/Desktop/code/Data Projects/Real-Estate-By-Census/real_estate_ui/app.R')
library(rsconnect)
rsconnect::deployApp('~/Desktop/code/Data Projects/Real-Estate-By-Census/real_estate_ui')
library(rsconnect)
rsconnect::deployApp('~/Desktop/code/Data Projects/Real-Estate-By-Census/real_estate_ui/')
library(rsconnect)
rsconnect::deployApp('~/Desktop/code/Data Projects/Real-Estate-By-Census/real_estate_ui/')
View(main_df)
shiny::runApp('Desktop/code/Data Projects/Real-Estate-By-Census/real_estate_ui')
View(main_df)
rcdf2 <- rcdf %>%
mutate(total_pop = total,
total_pop_white_perc = round(total_population_of_one_race_white_alone / total_pop),
total_pop_black_perc = total_population_of_one_race_black_or_african_american_alone / total_pop,
total_pop_american_indigenous_perc = total_population_of_one_race_american_indian_and_alaska_native_ / total_pop,
total_pop_asian_perc = total_population_of_one_race_asian_alone / total_pop,
total_pop_pacific_islander_perc =
total_population_of_one_race_native_hawaiian_and_other_pacific_ / total_pop,
total_pop_other_perc = total_population_of_one_race_some_other_race_alone / total_pop,
total_pop_mixed_races_perc = total_population_of_two_or_more_races / total_pop,
total_pop_hispanic_perc = total_hispanic_or_latino / total_pop,
county_pop_size = case_when(total_pop < 50000 ~ "Non Metro",
total_pop < 250000 ~ "Small Metro",
total_pop < 1000000 ~ "Mid Metro",
total_pop >= 1000000 ~ "Large Metro"
),
median_listing_price = if_else(median_listing_price > 1000000, 1000000, as.double(median_listing_price)),
median_square_feet = if_else(median_square_feet > 3000, 3000, as.double(median_square_feet)),
active_listing_count  = if_else(active_listing_count > 3000, 3000, as.double(active_listing_count)),
county_pop_size = factor(county_pop_size, levels = c("Non Metro", "Small Metro", "Mid Metro", "Large Metro", NA)),
county_pop_size = addNA(county_pop_size),
most_pop_perc = pmax(total_pop_white_perc, total_pop_black_perc, total_pop_american_indigenous_perc,
total_pop_asian_perc, total_pop_pacific_islander_perc, total_pop_other_perc,
total_pop_mixed_races_perc, total_pop_hispanic_perc),
largest_race_group = case_when(total_pop_hispanic_perc == most_pop_perc ~ "Hispanic",
total_pop_white_perc == most_pop_perc ~ "White",
total_pop_black_perc == most_pop_perc ~ "Black",
total_pop_american_indigenous_perc == most_pop_perc ~ "Native American",
total_pop_asian_perc == most_pop_perc ~ "Asian",
total_pop_pacific_islander_perc == most_pop_perc ~ "Pacific Islander",
total_pop_other_perc > most_pop_perc ~ "Other Race",
total_pop_mixed_races_perc > most_pop_perc ~ "Mixed Races",
total_pop_white_perc == most_pop_perc ~ "White"),
county_fips = if_else(nchar(county_fips) == 4, paste0("0", county_fips), county_fips)
) %>%
filter(!is.na(median_listing_price), !is.na(median_square_feet))
library(tidyverse)
library(urbnmapr)
library(maps)
library(sf)
library(rgdal)
print("Starting... ")
rcdf <- read.csv("data/realtor_census.csv") %>%
select(2,4,19, 18, 5:17, 23:32) %>%
filter(!is.na(total_hispanic_or_latino))
setwd("~/Desktop/code/Data Projects/Real-Estate-By-Census/real_estate_ui/data")
rcdf2 <- rcdf %>%
mutate(total_pop = total,
total_pop_white_perc = round(total_population_of_one_race_white_alone / total_pop),
total_pop_black_perc = total_population_of_one_race_black_or_african_american_alone / total_pop,
total_pop_american_indigenous_perc = total_population_of_one_race_american_indian_and_alaska_native_ / total_pop,
total_pop_asian_perc = total_population_of_one_race_asian_alone / total_pop,
total_pop_pacific_islander_perc =
total_population_of_one_race_native_hawaiian_and_other_pacific_ / total_pop,
total_pop_other_perc = total_population_of_one_race_some_other_race_alone / total_pop,
total_pop_mixed_races_perc = total_population_of_two_or_more_races / total_pop,
total_pop_hispanic_perc = total_hispanic_or_latino / total_pop,
county_pop_size = case_when(total_pop < 50000 ~ "Non Metro",
total_pop < 250000 ~ "Small Metro",
total_pop < 1000000 ~ "Mid Metro",
total_pop >= 1000000 ~ "Large Metro"
),
median_listing_price = if_else(median_listing_price > 1000000, 1000000, as.double(median_listing_price)),
median_square_feet = if_else(median_square_feet > 3000, 3000, as.double(median_square_feet)),
active_listing_count  = if_else(active_listing_count > 3000, 3000, as.double(active_listing_count)),
county_pop_size = factor(county_pop_size, levels = c("Non Metro", "Small Metro", "Mid Metro", "Large Metro", NA)),
county_pop_size = addNA(county_pop_size),
most_pop_perc = pmax(total_pop_white_perc, total_pop_black_perc, total_pop_american_indigenous_perc,
total_pop_asian_perc, total_pop_pacific_islander_perc, total_pop_other_perc,
total_pop_mixed_races_perc, total_pop_hispanic_perc),
largest_race_group = case_when(total_pop_hispanic_perc == most_pop_perc ~ "Hispanic",
total_pop_white_perc == most_pop_perc ~ "White",
total_pop_black_perc == most_pop_perc ~ "Black",
total_pop_american_indigenous_perc == most_pop_perc ~ "Native American",
total_pop_asian_perc == most_pop_perc ~ "Asian",
total_pop_pacific_islander_perc == most_pop_perc ~ "Pacific Islander",
total_pop_other_perc > most_pop_perc ~ "Other Race",
total_pop_mixed_races_perc > most_pop_perc ~ "Mixed Races",
total_pop_white_perc == most_pop_perc ~ "White"),
county_fips = if_else(nchar(county_fips) == 4, paste0("0", county_fips), county_fips)
) %>%
filter(!is.na(median_listing_price), !is.na(median_square_feet))
library(tidyverse)
library(urbnmapr)
library(maps)
library(sf)
library(rgdal)
print("Starting... ")
rcdf <- read.csv("data/realtor_census.csv") %>%
select(2,4,19, 18, 5:17, 23:32) %>%
filter(!is.na(total_hispanic_or_latino))
cd..
library(tidyverse)
library(urbnmapr)
library(maps)
library(sf)
library(rgdal)
print("Starting... ")
setwd('~/Desktop/code/Data Projects/Real-Estate-By-Census/real_estate_ui/')
rcdf <- read.csv("data/realtor_census.csv") %>%
select(2,4,19, 18, 5:17, 23:32) %>%
filter(!is.na(total_hispanic_or_latino))
rcdf$county_fips <- as.character(rcdf$county_fips)
rcdf2 <- rcdf %>%
mutate(total_pop = total,
total_pop_white_perc = round(total_population_of_one_race_white_alone / total_pop),
total_pop_black_perc = total_population_of_one_race_black_or_african_american_alone / total_pop,
total_pop_american_indigenous_perc = total_population_of_one_race_american_indian_and_alaska_native_ / total_pop,
total_pop_asian_perc = total_population_of_one_race_asian_alone / total_pop,
total_pop_pacific_islander_perc =
total_population_of_one_race_native_hawaiian_and_other_pacific_ / total_pop,
total_pop_other_perc = total_population_of_one_race_some_other_race_alone / total_pop,
total_pop_mixed_races_perc = total_population_of_two_or_more_races / total_pop,
total_pop_hispanic_perc = total_hispanic_or_latino / total_pop,
county_pop_size = case_when(total_pop < 50000 ~ "Non Metro",
total_pop < 250000 ~ "Small Metro",
total_pop < 1000000 ~ "Mid Metro",
total_pop >= 1000000 ~ "Large Metro"
),
median_listing_price = if_else(median_listing_price > 1000000, 1000000, as.double(median_listing_price)),
median_square_feet = if_else(median_square_feet > 3000, 3000, as.double(median_square_feet)),
active_listing_count  = if_else(active_listing_count > 3000, 3000, as.double(active_listing_count)),
county_pop_size = factor(county_pop_size, levels = c("Non Metro", "Small Metro", "Mid Metro", "Large Metro", NA)),
county_pop_size = addNA(county_pop_size),
most_pop_perc = pmax(total_pop_white_perc, total_pop_black_perc, total_pop_american_indigenous_perc,
total_pop_asian_perc, total_pop_pacific_islander_perc, total_pop_other_perc,
total_pop_mixed_races_perc, total_pop_hispanic_perc),
largest_race_group = case_when(total_pop_hispanic_perc == most_pop_perc ~ "Hispanic",
total_pop_white_perc == most_pop_perc ~ "White",
total_pop_black_perc == most_pop_perc ~ "Black",
total_pop_american_indigenous_perc == most_pop_perc ~ "Native American",
total_pop_asian_perc == most_pop_perc ~ "Asian",
total_pop_pacific_islander_perc == most_pop_perc ~ "Pacific Islander",
total_pop_other_perc > most_pop_perc ~ "Other Race",
total_pop_mixed_races_perc > most_pop_perc ~ "Mixed Races",
total_pop_white_perc == most_pop_perc ~ "White"),
county_fips = if_else(nchar(county_fips) == 4, paste0("0", county_fips), county_fips)
) %>%
filter(!is.na(median_listing_price), !is.na(median_square_feet))
# rcdf3 <- rcdf2 %>%
#   mutate(county_fips2 = case_when(nchar(county_fips) == 4 ~ c("0", county_fips),
#                                             county_fips == county_fips ~ county_fips),)
#urbnmapr
states_sf <- get_urbn_map("states", sf = TRUE)
counties_sf <- get_urbn_map("counties", sf = TRUE)
#counties_sf2 <- st_crs(counties_sf)
counties_sf3 <- as(counties_sf, Class = "Spatial")
#from maps
county_map <- map('county', fill = TRUE, plot = FALSE)
# county_map_merge <- county_fips %>%
#   left_join(county_map, by= c('polyname' = 'names'), copy= TRUE)
main_df <- merge(counties_sf3, rcdf2, by = "county_fips" )
main_df <- spTransform(main_df, CRS("+init=epsg:4326"))
print("Done...")
#counties_sf$geometry <- sf::st_as_sf(counties_sf$geometry)
View(rcdf2)
runApp()
library(rsconnect)
source('~/Desktop/code/Data Projects/Real-Estate-By-Census/real_estate_ui/hidden.r')
deployApp()
library(rsconnect)
rsconnect::setAccountInfo(name='miguelrondon92',
token='801C06AFE5A2BA30E3551A1BF1514EAC',
secret='dHy5lAjXMO+76OCWJ4G8m+Px53Xef92hUtRDycqf')
deployApp()
deployApp()
View(main_df)
View(rcdf2)
runApp()
runApp()
rsconnect::setAccountInfo(name='miguelrondon92', token='801C06AFE5A2BA30E3551A1BF1514EAC', secret='dHy5lAjXMO+76OCWJ4G8m+Px53Xef92hUtRDycqf')
deployApp()
deployApp()
rsconnect::setAccountInfo(name='miguelrondon92', token='1571D9907A860ACAFFA596B0CADB17EF', secret='2kZhPQsopnteT6fZ1W4RAZl3dn1Pos+wqZBeaGKa')
deployApp()
runApp()
